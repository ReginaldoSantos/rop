apply plugin:'java'

configurations{
	emma
}

dependencies{
	emma "emma:emma:2.1.5320"
	emma "emma:emma_ant:2.1.5320"
}

project.convention.plugins.emma = new EmmaPluginConvention(project)

class EmmaPluginConvention{
	def verbosityLevel = "info"
	def reportPath;
	def coverageFileName;
	def tmpDir;
	def instrDir;
	def metaDataFilePath;

	def emma(Closure close){
		close.delegate = this;
		close.run()
	}

	EmmaPluginConvention(Project project){
		reportPath       = "${project.reporting.baseDir}/emma"
		coverageFileName = "coverage"
		tmpDir           = "${project.buildDir}/tmp/emma"
		instrDir         = "${tmpDir}/instr"
		metaDataFilePath = "${tmpDir}/metadata.emma"
	}
}

test {
	// add EMMA related JVM args to our tests
	jvmArgs "-XX:-UseSplitVerifier", "-Demma.coverage.out.file=$buildDir/tmp/emma/metadata.emma", "-Demma.coverage.out.merge=true"

	doFirst {
		// define the custom EMMA ant tasks
		ant.taskdef(resource: "emma_ant.properties", classpath: configurations.emma.asPath)

		ant.path(id:"run.classpath") {
			pathelement(location:sourceSets.main.output.classesDir)
		}
		def emmaInstDir = new File(sourceSets.main.output.classesDir.parentFile.parentFile, "tmp/emma/instr")
		// instruct our compiled classes and store them at $buildDir/tmp/emma/instr
		ant.emma(enabled: 'true', verbosity: 'info') {
			instr(merge: "true", destdir: emmaInstDir, instrpathref: "run.classpath",
				metadatafile: new File(emmaInstDir, '/metadata.emma')) {
				instrpath {
					fileset(dir:sourceSets.main.output.classesDir, includes:"**/*.class")
				}
			}
		}
		setClasspath(files("$buildDir/tmp/emma/instr") + configurations.emma + getClasspath())
	}

	// The report should be generated directly after the tests are done.
	// We create three types (txt, html, xml) of reports here. Running your build script now should
	// result in output like that:
	doLast {
		def srcDir = sourceSets.main.java.srcDirs.join ','
		println "Creating test coverage reports for classes " + srcDir
		def emmaInstDir = new File(sourceSets.main.output.classesDir.parentFile.parentFile, "tmp/emma")
		ant.emma(enabled:"true") {
			report(sourcepath: srcDir) {
				fileset(dir: emmaInstDir) {
					include(name:"**/*.emma")
				}
				txt  outfile: "$buildDir/reports/emma/coverage.txt"
				html outfile: "$buildDir/reports/emma/coverage.html"
				xml  outfile: "$buildDir/reports/emma/coverage.xml"
			}
		}
		println "Test coverage reports available at $buildDir/reports/emma:"
		println " - $buildDir/reports/emma/coverage.txt"
		println " - $buildDir/reports/emma/coverage.html"
		println " - $buildDir/reports/emma/coverage.xml"
	}
}
